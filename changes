#!/bin/bash

# Copyright Â© 2024 Al Newkirk. All rights reserved.

# Variables for changes.
CHANGES_BASE=${CHANGES_BASE:=$PWD}
CHANGES_ROOT=${CHANGES_ROOT:=.changes}
CHANGES_PATH=${CHANGES_PATH:=$CHANGES_BASE/$CHANGES_ROOT}
CHANGES_TYPE=${CHANGES_TYPE:=txt}
CHANGES_INIT=${CHANGES_INIT:=$PWD/.changes}
CHANGES_FILE_CHANGES_MARKDOWN=${CHANGES_FILE_CHANGES_MARKDOWN:=CHANGELOG.md}
CHANGES_FILE_CHANGES_PLAINTEXT=${CHANGES_FILE_CHANGES_PLAINTEXT:=CHANGELOG}
CHANGES_FILE_RELEASE_MARKDOWN=${CHANGES_FILE_RELEASE_MARKDOWN:=RELEASE.md}
CHANGES_FILE_RELEASE_PLAINTEXT=${CHANGES_FILE_RELEASE_PLAINTEXT:=RELEASE}
CHANGES_VERSION=0.0.4

# Variables for errors.
CHANGES_ERROR_BASE_PATH="Invalid or missing base path"
CHANGES_ERROR_CHANGE_PATH="Invalid or missing change path"
CHANGES_ERROR_FORM_NAME="Invalid or missing form name"
CHANGES_ERROR_FUNC_NAME="Invalid or missing function name"
CHANGES_ERROR_HOOK_NAME="Invalid or missing hook name"
CHANGES_ERROR_MERGE_FROM="Invalid merge-from release name"
CHANGES_ERROR_MERGE_INTO="Invalid merge-into release name"
CHANGES_ERROR_RELEASE_EXISTS="Release already exists"
CHANGES_ERROR_RELEASE_NAME="Invalid or missing release name"
CHANGES_ERROR_RELEASE_QUEUE="Missing or empty release queue"
CHANGES_ERROR_REPORT_FORM="Invalid report format, try plaintext or markdown"
CHANGES_ERROR_REPORT_TYPE="Invalid report type, try next, changes, or release"
CHANGES_ERROR_ROOT_NAME="Invalid or missing root path name"
CHANGES_ERROR_SEARCH_TERM="Invalid or missing search term"
CHANGES_ERROR_TYPE_NAME="Invalid or missing type name"

# Function for outputting errors.
function changes_error() {
  echo "Error: $@"
}

# Function for generating a random token.
function changes_token() {
  echo $(date '+%s')-$$
}

# Function for generating a random filename.
function changes_filename() {
  echo $(changes_token).$CHANGES_TYPE
}

# Function for slugifying arbitrary text.
function changes_slugify() {
  echo "$@" | iconv -t ascii//TRANSLIT | sed -r s/[~\^]+//g | sed -r s/[^a-zA-Z0-9]+/-/g | sed -r s/^-+\|-+$//g | tr A-Z a-z
}

# Function for validating a change category.
function changes_category() {
  for value in "defect" "detract" "feature" "notice" "remove" "secure" "update"; do [[ "$1" == "$value" ]] && echo $value; done
}

# Function for outputting dates.
function changes_date() {
  echo $(date $( [[ $(uname) == "Darwin" ]] && echo "-r" || echo "-d @" ) $1 +"%Y-%m-%d")
}

# Change the changes base (i.e. the base path).
function changes_base() {
  if [ $# -eq 0 ] || [ -z "$1" ]; then
    changes_error $CHANGES_ERROR_BASE_PATH
    exit 1
  else
    BASE=$1
    if [ -d $CHANGES_INIT ]; then
      HOOK=$CHANGES_INIT/hooks/base
    else
      HOOK=$CHANGES_PATH/hooks/base
    fi
    mkdir -p $(dirname $HOOK)
    echo "CHANGES_BASE=$BASE" > $HOOK
    exit 0
  fi
}

# Print the environment variables.
function changes_conf() {
  echo "CHANGES_BASE=$CHANGES_BASE"
  echo "CHANGES_PATH=$CHANGES_PATH"
  echo "CHANGES_ROOT=$CHANGES_ROOT"
  echo "CHANGES_TYPE=$CHANGES_TYPE"
  exit 0
}

# Record defect. Optionally providing a slug, or filename, and release name.
function changes_defect() {
  local TYPE="defect"
  local SLUG=$(changes_slugify ${1:-"$(changes_token)"})
  local INTO=${2:-"next"}
  local FILE=$CHANGES_PATH/$INTO/$TYPE/$SLUG

  if [ ! -t 0 ]; then
    IFS= read -rd '' TEXT
  fi

  if [[ "$INTO" != "next" ]]; then
    local HEAD=$(find $CHANGES_PATH/*\@* -maxdepth 0 -type d -name *\@$INTO -exec basename {} \; | head -n 1)

    if [ -z "$HEAD" ]; then
      changes_error $CHANGES_ERROR_RELEASE_NAME
      exit 1
    fi

    if [ ! "$(ls -A $CHANGES_PATH/$HEAD)" ]; then
      changes_error $CHANGES_ERROR_RELEASE_NAME
      exit 1
    fi

    INTO=$HEAD
    FILE=$CHANGES_PATH/$INTO/$TYPE/$SLUG
  fi

  if [[ "$FILE" != *.$CHANGES_TYPE ]]; then
    FILE="$FILE.$CHANGES_TYPE"
  fi

  mkdir -p $(dirname $FILE)

  local FORM=$CHANGES_PATH/forms/defect

  if [[ "$FORM" != *.$CHANGES_TYPE ]]; then
    FORM="$FORM.$CHANGES_TYPE"
  fi
  if [ -f $FORM ] && [ ! -f $FILE ]; then
    export CHANGES_FORM_HEAD=$1
    export CHANGES_FORM_INTO=$INTO
    export CHANGES_FORM_SLUG=$SLUG
    export CHANGES_FORM_TEXT=$TEXT
    export CHANGES_FORM_TYPE=$TYPE
    envsubst < $FORM > $FILE
    unset CHANGES_FORM_HEAD
    unset CHANGES_FORM_INTO
    unset CHANGES_FORM_SLUG
    unset CHANGES_FORM_TEXT
    unset CHANGES_FORM_TYPE
  elif [ ! -f $FILE ]; then
    echo "${TEXT:-$1}" > $FILE
  fi

  $EDITOR $FILE < /dev/tty > /dev/tty

  exit 0
}

# Record detraction. Optionally providing a slug, or filename, and release name.
function changes_detract() {
  local TYPE="detract"
  local SLUG=$(changes_slugify ${1:-"$(changes_token)"})
  local INTO=${2:-"next"}
  local FILE=$CHANGES_PATH/$INTO/$TYPE/$SLUG

  if [ ! -t 0 ]; then
    IFS= read -rd '' TEXT
  fi

  if [[ "$INTO" != "next" ]]; then
    local HEAD=$(find $CHANGES_PATH/*\@* -maxdepth 0 -type d -name *\@$INTO -exec basename {} \; | head -n 1)

    if [ -z "$HEAD" ]; then
      changes_error $CHANGES_ERROR_RELEASE_NAME
      exit 1
    fi

    if [ ! "$(ls -A $CHANGES_PATH/$HEAD)" ]; then
      changes_error $CHANGES_ERROR_RELEASE_NAME
      exit 1
    fi

    INTO=$HEAD
    FILE=$CHANGES_PATH/$INTO/$TYPE/$SLUG
  fi

  if [[ "$FILE" != *.$CHANGES_TYPE ]]; then
    FILE="$FILE.$CHANGES_TYPE"
  fi

  mkdir -p $(dirname $FILE)

  local FORM=$CHANGES_PATH/forms/detract

  if [[ "$FORM" != *.$CHANGES_TYPE ]]; then
    FORM="$FORM.$CHANGES_TYPE"
  fi
  if [ -f $FORM ] && [ ! -f $FILE ]; then
    export CHANGES_FORM_HEAD=$1
    export CHANGES_FORM_INTO=$INTO
    export CHANGES_FORM_SLUG=$SLUG
    export CHANGES_FORM_TEXT=$TEXT
    export CHANGES_FORM_TYPE=$TYPE
    envsubst < $FORM > $FILE
    unset CHANGES_FORM_HEAD
    unset CHANGES_FORM_INTO
    unset CHANGES_FORM_SLUG
    unset CHANGES_FORM_TEXT
    unset CHANGES_FORM_TYPE
  elif [ ! -f $FILE ]; then
    echo "${TEXT:-$1}" > $FILE
  fi

  $EDITOR $FILE < /dev/tty > /dev/tty

  exit 0
}

# Execute a function handler using the NAME provided.
function changes_exec() {
  if [ $# -eq 0 ] || [ -z "$1" ]; then
    changes_error $CHANGES_ERROR_FUNC_NAME
    exit 1
  else
    NAME=$1
    FILE=$CHANGES_PATH/funcs/$NAME
    if [[ "$FILE" != *.$CHANGES_TYPE ]]; then
      FILE="$FILE.$CHANGES_TYPE"
    fi
    source $FILE
    changes_function_handler "$@"
    exit 0
  fi
}

# Record feature. Optionally providing a slug, or filename, and release name.
function changes_feature() {
  local TYPE="feature"
  local SLUG=$(changes_slugify ${1:-"$(changes_token)"})
  local INTO=${2:-"next"}
  local TEXT=$3
  local FILE=$CHANGES_PATH/$INTO/$TYPE/$SLUG

  if [ ! -t 0 ]; then
    IFS= read -rd '' TEXT
  fi

  if [[ "$INTO" != "next" ]]; then
    local HEAD=$(find $CHANGES_PATH/*\@* -maxdepth 0 -type d -name *\@$INTO -exec basename {} \; | head -n 1)

    if [ -z "$HEAD" ]; then
      changes_error $CHANGES_ERROR_RELEASE_NAME
      exit 1
    fi

    if [ ! "$(ls -A $CHANGES_PATH/$HEAD)" ]; then
      changes_error $CHANGES_ERROR_RELEASE_NAME
      exit 1
    fi

    INTO=$HEAD
    FILE=$CHANGES_PATH/$INTO/$TYPE/$SLUG
  fi

  if [[ "$FILE" != *.$CHANGES_TYPE ]]; then
    FILE="$FILE.$CHANGES_TYPE"
  fi

  mkdir -p $(dirname $FILE)

  local FORM=$CHANGES_PATH/forms/feature

  if [[ "$FORM" != *.$CHANGES_TYPE ]]; then
    FORM="$FORM.$CHANGES_TYPE"
  fi
  if [ -f $FORM ] && [ ! -f $FILE ]; then
    export CHANGES_FORM_HEAD=$1
    export CHANGES_FORM_INTO=$INTO
    export CHANGES_FORM_SLUG=$SLUG
    export CHANGES_FORM_TEXT=$TEXT
    export CHANGES_FORM_TYPE=$TYPE
    envsubst < $FORM > $FILE
    unset CHANGES_FORM_HEAD
    unset CHANGES_FORM_INTO
    unset CHANGES_FORM_SLUG
    unset CHANGES_FORM_TEXT
    unset CHANGES_FORM_TYPE
  elif [ ! -f $FILE ]; then
    echo "${TEXT:-$1}" > $FILE
  fi

  $EDITOR $FILE < /dev/tty > /dev/tty

  exit 0
}

# Find changes matching the terms provided and print the filename(s).
function changes_find() {
  if [ $# -eq 0 ] || [ -z "$1" ]; then
    changes_error $CHANGES_ERROR_SEARCH_TERM
    exit 1
  else
    TEMP=$(mktemp)
    find $CHANGES_PATH -type f -name \*.$CHANGES_TYPE > $TEMP
    for EXPR in "$@"; do
      if [ ! -s $TEMP ]; then
        break
      fi
      case "$EXPR" in
        +*) grep "${EXPR:1}" $(cat $TEMP) -il > $TEMP ;;
        -*) grep "${EXPR:1}" $(cat $TEMP) -iL > $TEMP ;;
        *)  grep "$EXPR" $(cat $TEMP) -il > $TEMP ;;
      esac
    done
    cat $TEMP
    rm $TEMP
    exit 0
  fi
}

# Find changes matching the terms provided and print the filename(s).
function changes_files() {
  if [ $# -eq 0 ] || [ -z "$1" ]; then
    changes_error $CHANGES_ERROR_SEARCH_TERM
    exit 1
  else
    TEMP=$(mktemp)
    find $CHANGES_PATH -type f -name \*.$CHANGES_TYPE > $TEMP
    for EXPR in "$@"; do
      if [ ! -s $TEMP ]; then
        break
      fi
      RESULT=$(mktemp)
      case "$EXPR" in
        +*) grep "${EXPR:1}" $TEMP -i | tee $RESULT > /dev/null && mv $RESULT $TEMP ;;
        -*) grep "${EXPR:1}" $TEMP -iv | tee $RESULT > /dev/null && mv $RESULT $TEMP ;;
        *)  grep "$EXPR" $TEMP -i | tee $RESULT > /dev/null && mv $RESULT $TEMP ;;
      esac
    done
    cat $TEMP
    rm $TEMP
    exit 0
  fi
}

# Create a change form (i.e. template) using the NAME provided.
function changes_form() {
  if [ $# -eq 0 ] || [ -z "$1" ]; then
    changes_error $CHANGES_ERROR_FORM_NAME
    exit 1
  elif [ -z "$(changes_category $1)" ]; then
    changes_error $CHANGES_ERROR_FORM_NAME
    exit 1
  else
    NAME=$1
    FILE=$CHANGES_PATH/forms/$NAME
    if [[ "$FILE" != *.$CHANGES_TYPE ]]; then
      FILE="$FILE.$CHANGES_TYPE"
    fi
    mkdir -p $(dirname $FILE)
    $EDITOR "$FILE"
    exit 0
  fi
}

# Create a function handler using the NAME provided.
function changes_func() {
  if [ $# -eq 0 ] || [ -z "$1" ]; then
    changes_error $CHANGES_ERROR_FUNC_NAME
    exit 1
  else
    NAME=$1
    FILE=$CHANGES_PATH/funcs/$NAME
    if [[ "$FILE" != *.$CHANGES_TYPE ]]; then
      FILE="$FILE.$CHANGES_TYPE"
    fi
    mkdir -p $(dirname $FILE)
    if [ ! -s $FILE ]; then
      echo -e "function changes_function_handler() {}" > $FILE
    fi
    $EDITOR "$FILE"
    exit 0
  fi
}

# Generate the version and release documents for the current release.
function changes_generate() {
  if [ -n "$CHANGES_FILE_RELEASE_PLAINTEXT" ]; then
    echo -e "$(changes_generate_release_in_plaintext)" > $CHANGES_FILE_RELEASE_PLAINTEXT
  fi
  if [ -n "$CHANGES_FILE_RELEASE_MARKDOWN" ]; then
    echo -e "$(changes_generate_release_in_markdown)" > $CHANGES_FILE_RELEASE_MARKDOWN
  fi
  if [ -n "$CHANGES_FILE_CHANGES_PLAINTEXT" ]; then
    echo -e "$(changes_generate_changes_in_plaintext)" > $CHANGES_FILE_CHANGES_PLAINTEXT
  fi
  if [ -n "$CHANGES_FILE_CHANGES_MARKDOWN" ]; then
    echo -e "$(changes_generate_changes_in_markdown)" > $CHANGES_FILE_CHANGES_MARKDOWN
  fi
  exit 0
}

# Output changelog in markdown.
function changes_generate_changes_in_markdown() {
  local CHANGES="# Changelog\n\n"

  local EXPR=$CHANGES_PATH/*\@*
  for version in $(find $EXPR -maxdepth 0 -type d -exec basename {} \; 2>/dev/null | sort -r); do
    local identity=$(echo $version | cut -d@ -f2)
    local timestamp=$(changes_date $(echo $version | cut -d@ -f1))
    CHANGES+="## Version: ${identity}\n\n"
    for category in $(ls $CHANGES_PATH/$version | sort); do
      for change in $(ls $CHANGES_PATH/$version/$category | sort); do
        CHANGES+="- [$category] $(head -n 1 $CHANGES_PATH/$version/$category/$change)\n"
      done
    done
    CHANGES+="\n"
  done

  echo -e "$CHANGES"

  exit 0
}

# Output changelog in plaintext.
function changes_generate_changes_in_plaintext() {
  local CHANGES=""

  local EXPR=$CHANGES_PATH/*\@*
  for version in $(find $EXPR -maxdepth 0 -type d -exec basename {} \; 2>/dev/null | sort -r); do
    local identity=$(echo $version | cut -d@ -f2)
    local timestamp=$(changes_date $(echo $version | cut -d@ -f1))
    CHANGES+="${identity} ${timestamp}\n\n"
    for category in $(ls $CHANGES_PATH/$version | sort); do
      for change in $(ls $CHANGES_PATH/$version/$category | sort); do
        CHANGES+="- [$category] $(head -n 1 $CHANGES_PATH/$version/$category/$change)\n"
      done
    done
    CHANGES+="\n"
  done

  echo -e "$CHANGES"

  exit 0
}

# Output queue in markdown.
function changes_generate_next_in_markdown() {
  if [ ! "$(ls -A $CHANGES_PATH/next/* 2>/dev/null)" ]; then
    exit 1
  fi

  local CHANGES="# Pending\n\n"

  for category in $(ls $CHANGES_PATH/next | sort); do
    for change in $(ls $CHANGES_PATH/next/$category | sort); do
      CHANGES+="- [$category] $(head -n 1 $CHANGES_PATH/next/$category/$change)\n"
    done
  done
  CHANGES+="\n"

  echo -e "$CHANGES"

  exit 0
}

# Output queue in plaintext.
function changes_generate_next_in_plaintext() {
  if [ ! "$(ls -A $CHANGES_PATH/next/* 2>/dev/null)" ]; then
    exit 1
  fi

  local CHANGES="Pending\n\n"

  for category in $(ls $CHANGES_PATH/next | sort); do
    for change in $(ls $CHANGES_PATH/next/$category | sort); do
      CHANGES+="- [$category] $(head -n 1 $CHANGES_PATH/next/$category/$change)\n"
    done
  done
  CHANGES+="\n"

  echo -e "$CHANGES"

  exit 0
}

# Output release in markdown.
function changes_generate_release_in_markdown() {
  local CHANGES="# Release\n\n"

  local EXPR=$CHANGES_PATH/*\@*
  for version in $(find $EXPR -maxdepth 0 -type d -exec basename {} \; 2>/dev/null | sort -r); do
    local identity=$(echo $version | cut -d@ -f2)
    local timestamp=$(changes_date $(echo $version | cut -d@ -f1))
    CHANGES+="## Version: ${identity}\n\n"
    for category in $(ls $CHANGES_PATH/$version | sort); do
      for change in $(ls $CHANGES_PATH/$version/$category | sort); do
        CHANGES+="- [$category] $(head -n 1 $CHANGES_PATH/$version/$category/$change)\n"
      done
    done
    CHANGES+="\n"
    break
  done

  echo -e "$CHANGES"

  exit 0
}

# Output release in plaintext.
function changes_generate_release_in_plaintext() {
  local CHANGES=""

  local EXPR=$CHANGES_PATH/*\@*
  for version in $(find $EXPR -maxdepth 0 -type d -exec basename {} \; 2>/dev/null | sort -r); do
    local identity=$(echo $version | cut -d@ -f2)
    local timestamp=$(changes_date $(echo $version | cut -d@ -f1))
    CHANGES+="${identity} ${timestamp}\n\n"
    for category in $(ls $CHANGES_PATH/$version | sort); do
      for change in $(ls $CHANGES_PATH/$version/$category | sort); do
        CHANGES+="- [$category] $(head -n 1 $CHANGES_PATH/$version/$category/$change)\n"
      done
    done
    CHANGES+="\n"
    break
  done

  echo -e "$CHANGES"

  exit 0
}

# Find changes matching the terms provided and print matches using grep.
function changes_grep() {
  if [ $# -eq 0 ] || [ -z "$1" ]; then
    changes_error $CHANGES_ERROR_SEARCH_TERM
    exit 1
  else
    TEMP=$(mktemp)
    find $CHANGES_PATH -type f -name \*.$CHANGES_TYPE > $TEMP
    TERMS=()
    for EXPR in "$@"; do
      if [ ! -s $TEMP ]; then
        break
      fi
      case "$EXPR" in
        +*) TERMS+=("${EXPR:1}"); grep "${EXPR:1}" $(cat $TEMP) -il > $TEMP ;;
        -*) grep "${EXPR:1}" $(cat $TEMP) -iL > $TEMP ;;
        *)  TERMS+=("${EXPR}"); grep "$EXPR" $(cat $TEMP) -il > $TEMP ;;
      esac
    done
    local EXPR=$(IFS='|'; echo "${TERMS[*]}")
    local FILES="$(echo $(cat $TEMP))"
    if [ -z "$EXPR" ]; then
      EXPR="\*"
    fi
    if [ ! -s $TEMP ]; then
      rm $TEMP
      exit 1
    else
      rm $TEMP
      grep -inHE "$EXPR" $FILES
      exit 0
    fi
  fi
}

# Create a runtime hook using the NAME provided.
function changes_hook() {
  if [ $# -eq 0 ] || [ -z "$1" ]; then
    changes_error $CHANGES_ERROR_HOOK_NAME
    exit 1
  else
    NAME=$1
    if [ -d $CHANGES_INIT ]; then
      HOOK=$CHANGES_INIT/hooks/$NAME
    else
      HOOK=$CHANGES_PATH/hooks/$NAME
    fi
    mkdir -p $(dirname $HOOK)
    $EDITOR "$HOOK"
    exit 0
  fi
}

# Initialize the changes repository.
function changes_init() {
  mkdir -p $PWD/$CHANGES_ROOT
  exit 0
}

# Merge a release into another, on undo a release by merging into "next".
function changes_merge() {
  local FROM_NAME=${1:-"$(changes_version)"}
  local INTO_NAME=${2:-"$(changes_version)"}

  local EXPR=$CHANGES_PATH/*\@*
  local HEAD=$(find $EXPR -maxdepth 0 -type d -name *\@$FROM_NAME -exec basename {} \; 2>/dev/null | head -n 1)
  local TAIL=$(find $EXPR -maxdepth 0 -type d -name *\@$INTO_NAME -exec basename {} \; 2>/dev/null | tail -n 1)

  if [ "$INTO_NAME" == "next" ]; then
    TAIL=$INTO_NAME
  fi

  if [ -z "$HEAD" ]; then
    changes_error $CHANGES_ERROR_MERGE_FROM
    exit 1
  fi

  if [ -z "$TAIL" ]; then
    changes_error $CHANGES_ERROR_MERGE_INTO
    exit 1
  fi

  if [ "$HEAD" == "$TAIL" ]; then
    exit 1
  fi

  cp -r $CHANGES_PATH/$HEAD/* $CHANGES_PATH/$TAIL/

  rm -rf $CHANGES_PATH/$HEAD

  $(changes_generate)

  exit 0
}

# Record notice. Optionally providing a slug, or filename, and release name.
function changes_notice() {
  local TYPE="notice"
  local SLUG=$(changes_slugify ${1:-"$(changes_token)"})
  local INTO=${2:-"next"}
  local FILE=$CHANGES_PATH/$INTO/$TYPE/$SLUG

  if [ ! -t 0 ]; then
    IFS= read -rd '' TEXT
  fi

  if [[ "$INTO" != "next" ]]; then
    local HEAD=$(find $CHANGES_PATH/*\@* -maxdepth 0 -type d -name *\@$INTO -exec basename {} \; | head -n 1)

    if [ -z "$HEAD" ]; then
      changes_error $CHANGES_ERROR_RELEASE_NAME
      exit 1
    fi

    if [ ! "$(ls -A $CHANGES_PATH/$HEAD)" ]; then
      changes_error $CHANGES_ERROR_RELEASE_NAME
      exit 1
    fi

    INTO=$HEAD
    FILE=$CHANGES_PATH/$INTO/$TYPE/$SLUG
  fi

  if [[ "$FILE" != *.$CHANGES_TYPE ]]; then
    FILE="$FILE.$CHANGES_TYPE"
  fi

  mkdir -p $(dirname $FILE)

  local FORM=$CHANGES_PATH/forms/notice

  if [[ "$FORM" != *.$CHANGES_TYPE ]]; then
    FORM="$FORM.$CHANGES_TYPE"
  fi
  if [ -f $FORM ] && [ ! -f $FILE ]; then
    export CHANGES_FORM_HEAD=$1
    export CHANGES_FORM_INTO=$INTO
    export CHANGES_FORM_SLUG=$SLUG
    export CHANGES_FORM_TEXT=$TEXT
    export CHANGES_FORM_TYPE=$TYPE
    envsubst < $FORM > $FILE
    unset CHANGES_FORM_HEAD
    unset CHANGES_FORM_INTO
    unset CHANGES_FORM_SLUG
    unset CHANGES_FORM_TEXT
    unset CHANGES_FORM_TYPE
  elif [ ! -f $FILE ]; then
    echo "${TEXT:-$1}" > $FILE
  fi

  $EDITOR $FILE < /dev/tty > /dev/tty

  exit 0
}

# Find notes matching the terms provided and open the file(s) in the EDITOR.
function changes_open() {
  if [ "$#" -eq 0 ]; then
    exit 1
  else
    $EDITOR $(changes_find "$@")
    exit 0
  fi
}

# Change the changes path for changes.
function changes_path() {
  if [ $# -eq 0 ] || [ -z "$1" ]; then
    changes_error $CHANGES_ERROR_CHANGE_PATH
    exit 1
  else
    DATA=$1
    if [ -d $CHANGES_INIT ]; then
      HOOK=$CHANGES_INIT/hooks/path
    else
      HOOK=$CHANGES_PATH/hooks/path
    fi
    mkdir -p $(dirname $HOOK)
    echo "CHANGES_PATH=$DATA" > $HOOK
    exit 0
  fi
}

# Create release and generate changelog and release text and makrdown documents.
function changes_release() {
  if [ $# -eq 0 ] || [ -z "$1" ]; then
    changes_error $CHANGES_ERROR_RELEASE_NAME
    exit 1
  fi

  local NAME=$1
  local NEXT="$(date '+%s')@${NAME}"
  local INTO=$CHANGES_PATH/$NEXT
  local FROM=$CHANGES_PATH/next

  if [ ! -d $FROM ] || [ ! "$(ls -A $FROM)" ]; then
    changes_error $CHANGES_ERROR_RELEASE_QUEUE
    exit 1
  fi

  mkdir -p $INTO

  if [ "$(find $CHANGES_PATH/*\@${NAME} -type f 2>/dev/null | wc -l)" -gt 0 ]; then
    changes_error $CHANGES_ERROR_RELEASE_EXISTS
    exit 1
  fi

  mv $FROM/* $INTO/

  $(changes_generate)

  exit 0
}

# Record removal. Optionally providing a slug, or filename, and release name.
function changes_remove() {
  local TYPE="remove"
  local SLUG=$(changes_slugify ${1:-"$(changes_token)"})
  local INTO=${2:-"next"}
  local FILE=$CHANGES_PATH/$INTO/$TYPE/$SLUG

  if [ ! -t 0 ]; then
    IFS= read -rd '' TEXT
  fi

  if [[ "$INTO" != "next" ]]; then
    local HEAD=$(find $CHANGES_PATH/*\@* -maxdepth 0 -type d -name *\@$INTO -exec basename {} \; | head -n 1)

    if [ -z "$HEAD" ]; then
      changes_error $CHANGES_ERROR_RELEASE_NAME
      exit 1
    fi

    if [ ! "$(ls -A $CHANGES_PATH/$HEAD)" ]; then
      changes_error $CHANGES_ERROR_RELEASE_NAME
      exit 1
    fi

    INTO=$HEAD
    FILE=$CHANGES_PATH/$INTO/$TYPE/$SLUG
  fi

  if [[ "$FILE" != *.$CHANGES_TYPE ]]; then
    FILE="$FILE.$CHANGES_TYPE"
  fi

  mkdir -p $(dirname $FILE)

  local FORM=$CHANGES_PATH/forms/remove

  if [[ "$FORM" != *.$CHANGES_TYPE ]]; then
    FORM="$FORM.$CHANGES_TYPE"
  fi
  if [ -f $FORM ] && [ ! -f $FILE ]; then
    export CHANGES_FORM_HEAD=$1
    export CHANGES_FORM_INTO=$INTO
    export CHANGES_FORM_SLUG=$SLUG
    export CHANGES_FORM_TEXT=$TEXT
    export CHANGES_FORM_TYPE=$TYPE
    envsubst < $FORM > $FILE
    unset CHANGES_FORM_HEAD
    unset CHANGES_FORM_INTO
    unset CHANGES_FORM_SLUG
    unset CHANGES_FORM_TEXT
    unset CHANGES_FORM_TYPE
  elif [ ! -f $FILE ]; then
    echo "${TEXT:-$1}" > $FILE
  fi

  $EDITOR $FILE < /dev/tty > /dev/tty

  exit 0
}

# Print pending changes, released changes, or the changes from the current release.
function changes_report() {
  local TYPE=${1:-"next"}
  local FORM=${2:-"plaintext"}

  if [ "$FORM" != "markdown" ] && [ "$FORM" != "plaintext" ]; then
    changes_error $CHANGES_ERROR_REPORT_FORM
    exit 1
  fi

  if [ "$TYPE" != "changes" ] && [ "$TYPE" != "next" ] && [ "$TYPE" != "release" ]; then
    changes_error $CHANGES_ERROR_REPORT_TYPE
    exit 1
  fi

  local TASK="changes_generate_${TYPE}_in_${FORM}"

  $TASK

  exit 0
}

# Revert the current release and move the changes into the release queue.
function changes_revert() {
  local NAME=$(changes_version)

  if [ -z "$NAME" ]; then
    exit 1
  fi

  $(changes_merge "$NAME" "next")

  exit 0
}

# Change the changes root path name (i.e. under the base).
function changes_root() {
  if [ $# -eq 0 ] || [ -z "$1" ]; then
    changes_error $CHANGES_ERROR_ROOT_NAME
    exit 1
  else
    ROOT=$1
    if [ -d $CHANGES_INIT ]; then
      HOOK=$CHANGES_INIT/hooks/root
    else
      HOOK=$CHANGES_PATH/hooks/root
    fi
    mkdir -p $(dirname $HOOK)
    echo "CHANGES_ROOT=$ROOT" > $HOOK
    exit 0
  fi
}

# Find changes matching the terms provided and print the results and filename(s).
function changes_search() {
  if [ $# -eq 0 ] || [ -z "$1" ]; then
    changes_error $CHANGES_ERROR_SEARCH_TERM
    exit 1
  else
    for FILE in $(changes_find $@); do
      echo $FILE
      local IFS="|"
      EXPR="$*"
      grep -iE "$EXPR" $FILE
      echo
    done
  fi
  exit 0
}

# Record vulnerability. Optionally providing a slug, or filename, and release name.
function changes_secure() {
  local TYPE="secure"
  local SLUG=$(changes_slugify ${1:-"$(changes_token)"})
  local INTO=${2:-"next"}
  local FILE=$CHANGES_PATH/$INTO/$TYPE/$SLUG

  if [ ! -t 0 ]; then
    IFS= read -rd '' TEXT
  fi

  if [[ "$INTO" != "next" ]]; then
    local HEAD=$(find $CHANGES_PATH/*\@* -maxdepth 0 -type d -name *\@$INTO -exec basename {} \; | head -n 1)

    if [ -z "$HEAD" ]; then
      changes_error $CHANGES_ERROR_RELEASE_NAME
      exit 1
    fi

    if [ ! "$(ls -A $CHANGES_PATH/$HEAD)" ]; then
      changes_error $CHANGES_ERROR_RELEASE_NAME
      exit 1
    fi

    INTO=$HEAD
    FILE=$CHANGES_PATH/$INTO/$TYPE/$SLUG
  fi

  if [[ "$FILE" != *.$CHANGES_TYPE ]]; then
    FILE="$FILE.$CHANGES_TYPE"
  fi

  mkdir -p $(dirname $FILE)

  local FORM=$CHANGES_PATH/forms/secure

  if [[ "$FORM" != *.$CHANGES_TYPE ]]; then
    FORM="$FORM.$CHANGES_TYPE"
  fi
  if [ -f $FORM ] && [ ! -f $FILE ]; then
    export CHANGES_FORM_HEAD=$1
    export CHANGES_FORM_INTO=$INTO
    export CHANGES_FORM_SLUG=$SLUG
    export CHANGES_FORM_TEXT=$TEXT
    export CHANGES_FORM_TYPE=$TYPE
    envsubst < $FORM > $FILE
    unset CHANGES_FORM_HEAD
    unset CHANGES_FORM_INTO
    unset CHANGES_FORM_SLUG
    unset CHANGES_FORM_TEXT
    unset CHANGES_FORM_TYPE
  elif [ ! -f $FILE ]; then
    echo "${TEXT:-$1}" > $FILE
  fi

  $EDITOR $FILE < /dev/tty > /dev/tty

  exit 0
}

# Show changes for a specific release or the current release. Optionally providing a release name.
function changes_show() {
  if [ ! "$(ls -A $CHANGES_PATH/*\@* 2>/dev/null)" ]; then
    exit 1
  fi

  local NAME=${1:-"$(changes_version)"}
  local HEAD=$(find $CHANGES_PATH/*\@* -maxdepth 0 -type d -name *\@$NAME -exec basename {} \; | head -n 1)

  if [ -z "$HEAD" ]; then
    changes_error $CHANGES_ERROR_RELEASE_NAME
    exit 1
  fi

  if [ ! "$(ls -A $CHANGES_PATH/$HEAD)" ]; then
    changes_error $CHANGES_ERROR_RELEASE_NAME
    exit 1
  fi

  local CHANGES="Version $NAME\n\n"

  for category in $(ls $CHANGES_PATH/$HEAD | sort); do
    for change in $(ls $CHANGES_PATH/$HEAD/$category | sort); do
      CHANGES+="- [$category] $(head -n 1 $CHANGES_PATH/$HEAD/$category/$change)\n"
    done
  done
  CHANGES+="\n"

  echo -e "$CHANGES"

  exit 0
}

# Change the changes type (i.e. the file suffix).
function changes_type() {
  if [ $# -eq 0 ] || [ -z "$1" ]; then
    changes_error $CHANGES_ERROR_TYPE_NAME
    exit 1
  else
    TYPE=$1
    if [ -d $CHANGES_INIT ]; then
      HOOK=$CHANGES_INIT/hooks/type
    else
      HOOK=$CHANGES_PATH/hooks/type
    fi
    mkdir -p $(dirname $HOOK)
    echo "CHANGES_TYPE=$TYPE" > $HOOK
    exit 0
  fi
}

# Record update. Optionally providing a slug, or filename, and release name.
function changes_update() {
  local TYPE="update"
  local SLUG=$(changes_slugify ${1:-"$(changes_token)"})
  local INTO=${2:-"next"}
  local FILE=$CHANGES_PATH/$INTO/$TYPE/$SLUG

  if [ ! -t 0 ]; then
    IFS= read -rd '' TEXT
  fi

  if [[ "$INTO" != "next" ]]; then
    local HEAD=$(find $CHANGES_PATH/*\@* -maxdepth 0 -type d -name *\@$INTO -exec basename {} \; | head -n 1)

    if [ -z "$HEAD" ]; then
      changes_error $CHANGES_ERROR_RELEASE_NAME
      exit 1
    fi

    if [ ! "$(ls -A $CHANGES_PATH/$HEAD)" ]; then
      changes_error $CHANGES_ERROR_RELEASE_NAME
      exit 1
    fi

    INTO=$HEAD
    FILE=$CHANGES_PATH/$INTO/$TYPE/$SLUG
  fi

  if [[ "$FILE" != *.$CHANGES_TYPE ]]; then
    FILE="$FILE.$CHANGES_TYPE"
  fi

  mkdir -p $(dirname $FILE)

  local FORM=$CHANGES_PATH/forms/update

  if [[ "$FORM" != *.$CHANGES_TYPE ]]; then
    FORM="$FORM.$CHANGES_TYPE"
  fi
  if [ -f $FORM ] && [ ! -f $FILE ]; then
    export CHANGES_FORM_HEAD=$1
    export CHANGES_FORM_INTO=$INTO
    export CHANGES_FORM_SLUG=$SLUG
    export CHANGES_FORM_TEXT=$TEXT
    export CHANGES_FORM_TYPE=$TYPE
    envsubst < $FORM > $FILE
    unset CHANGES_FORM_HEAD
    unset CHANGES_FORM_INTO
    unset CHANGES_FORM_SLUG
    unset CHANGES_FORM_TEXT
    unset CHANGES_FORM_TYPE
  elif [ ! -f $FILE ]; then
    echo "${TEXT:-$1}" > $FILE
  fi

  $EDITOR $FILE < /dev/tty > /dev/tty

  exit 0
}

# Print the latest release name.
function changes_version() {
  local EXPR=$CHANGES_PATH/*\@*
  for version in $(find $EXPR -maxdepth 0 -type d -exec basename {} \; 2>/dev/null | sort -r | head -n1); do
    echo $(echo $version | cut -d@ -f2)
    break
  done

  exit 0
}

# Print the list of release names in chronological order.
function changes_versions() {
  local EXPR=$CHANGES_PATH/*\@*
  for version in $(find $EXPR -maxdepth 0 -type d -exec basename {} \; 2>/dev/null); do
    echo $(echo $version | cut -d@ -f2)
  done

  exit 0
}

# Print help message
function changes_help() {
  PROG=$(basename $0)
  cat << EOF
Usage: $PROG [COMMAND] [ARGS...]

Manage changes with ease from the command-line using your \$EDITOR. Use the
"help" command to display this message.

Commands:
  base PATH                         Change the changes base, i.e. the base path.
                                    Example:
                                      $PROG base /path/to/changes

  conf                              Print the environment variables.
                                    Example:
                                      $PROG conf

  defect [SLUG] [NAME] [TEXT]       Record defect. Optionally providing a slug, or filename, and release name.
                                    Example:
                                      $PROG defect
                                      $PROG defect user-management
                                      $PROG defect user-management 0.0.1

  detract [SLUG] [NAME] [TEXT]      Record detraction. Optionally providing a slug, or filename, and release name.
                                    Example:
                                      $PROG detract
                                      $PROG detract user-management
                                      $PROG detract user-management 0.0.1

  feature [SLUG] [NAME]             Record feature. Optionally providing a slug, or filename, and release name.
                                    Example:
                                      $PROG feature
                                      $PROG feature user-management
                                      $PROG feature user-management 0.0.1

  files TERM [TERM, ...]            Find files matching the terms provided and print the filename(s).
                                    Examples:
                                      $PROG files next
                                      $PROG files next feature

  find TERM [TERM, ...]             Find changes matching the terms provided and print the filename(s).
                                    Examples:
                                      $PROG find user management
                                      $PROG find user management add
                                      $PROG find user management remove

  form NAME                         Create a change form, i.e. template, using the NAME provided.
                                    Example:
                                      $PROG form defect
                                      $PROG form detract
                                      $PROG form feature
                                      $PROG form notice
                                      $PROG form remove
                                      $PROG form secure
                                      $PROG form update

  generate                          Generate the version and release documents for the current release.
                                    Example:
                                      $PROG generate

  grep TERM [TERM, ...]             Find changes matching the terms provided and print matches using grep.
                                    Examples:
                                      $PROG grep user management
                                      $PROG grep user management add
                                      $PROG grep user management remove

  hook NAME                         Create a runtime hook using the NAME provided.
                                    Example:
                                      $PROG hook vars

  init                              Initialize the changes repository.
                                    Example:
                                      $PROG init

  merge [FROM] [INTO]               Merge a release into another, on undo a release by merging into "next".
                                    Example:
                                      $PROG merge
                                      $PROG merge 0.0.1
                                      $PROG merge 0.0.1 0.0.2
                                      $PROG merge 0.0.2 next

  notice [SLUG] [NAME] [TEXT]       Record notice. Optionally providing a slug, or filename, and release name.
                                    Example:
                                      $PROG notice
                                      $PROG notice user-management
                                      $PROG notice user-management 0.0.1

  open TERM [TERM, ...]             Find changes matching the terms provided and open the file(s) in the EDITOR.
                                    Examples:
                                      $PROG open user management
                                      $PROG open user management add
                                      $PROG open user management remove

  path PATH                         Change the changes path for changes.
                                    Example:
                                      $PROG path /path/to/changes/.changes

  release NAME                      Create release and generate changelog and release text and makrdown documents.
                                    Example:
                                      $PROG release 0.0.1-alpha
                                      $PROG release 0.0.1-beta
                                      $PROG release 0.0.1

  remove [SLUG] [NAME] [TEXT]       Record removal. Optionally providing a slug, or filename, and release name.
                                    Example:
                                      $PROG remove
                                      $PROG remove user-management
                                      $PROG remove user-management 0.0.1

  report [TYPE] [FORMAT]            Print pending changes, released changes, or the changes from the current release.
                                    Optionally providing a type in the form of "next", "changes", or "release", and a
                                    format in the form of "markdown" or "plaintext".
                                    Example:
                                      $PROG report
                                      $PROG report changes
                                      $PROG report changes markdown
                                      $PROG report changes plaintext
                                      $PROG report release
                                      $PROG report release markdown
                                      $PROG report release plaintext
                                      $PROG report next

  revert                            Revert the current release and move the changes into the release queue.
                                    Example:
                                      $PROG revert

  root NAME                         Change the changes root path name, i.e. under the base.
                                    Example:
                                      $PROG root .changes

  search TERM [TERM, ...]           Find changes matching the terms provided and print the results and filename(s).
                                    Examples:
                                      $PROG search user management
                                      $PROG search user management add
                                      $PROG search user management remove

  secure [SLUG] [NAME] [TEXT]       Record vulnerability. Optionally providing a slug, or filename, and release name.
                                    Example:
                                      $PROG secure
                                      $PROG secure user-management
                                      $PROG secure user-management 0.0.1

  show [NAME]                       Show changes for a specific release or the current release. Optionally providing
                                    a release name.
                                    Example:
                                      $PROG show
                                      $PROG show 0.0.1

  type NAME                         Change the file type, i.e. the file suffix.
                                    Examples:
                                      $PROG type md
                                      $PROG type txt

  update [SLUG] [NAME] [TEXT]       Record update. Optionally providing a slug, or filename, and release name.
                                    Example:
                                      $PROG update
                                      $PROG update user-management
                                      $PROG update user-management 0.0.1

  version                           Print the latest release name.
                                    Example:
                                      $PROG version

  versions                          Print the list of release names in chronological order.
                                    Example:
                                      $PROG versions

This is "$PROG" version $CHANGES_VERSION. Copyright 2024. All rights reserved.
EOF
  exit 1
}

# Discover the changes repository.
if [ ! -d $CHANGES_PATH ] && [ -d $HOME/$CHANGES_ROOT ]; then
  export CHANGES_BASE=$HOME
  export CHANGES_PATH=$CHANGES_BASE/$CHANGES_ROOT
fi
if [ ! -d $CHANGES_PATH ]; then
  changes_init
fi

# Source registered hooks.
if [ -d $CHANGES_INIT/hooks ]; then
  for hook in $(find $CHANGES_INIT/hooks -type f | sort); do
    source $hook
  done
  export CHANGES_PATH=$CHANGES_BASE/$CHANGES_ROOT
elif [ -d $CHANGES_PATH/hooks ]; then
  for hook in $(find $CHANGES_PATH/hooks -type f | sort); do
    source $hook
  done
  export CHANGES_PATH=$CHANGES_BASE/$CHANGES_ROOT
fi

# Ensure the "next" directory exists.
mkdir -p $CHANGES_PATH/next

# Main script logic.
if [ $# -eq 0 ]; then
    changes_report
elif [ "$1" == "base" ]; then
  shift
  changes_base "$@"
elif [ "$1" == "conf" ]; then
  shift
  changes_conf "$@"
elif [ "$1" == "defect" ]; then
  shift
  changes_defect "$@"
elif [ "$1" == "detract" ]; then
  shift
  changes_detract "$@"
elif [ "$1" == "exec" ]; then
  shift
  changes_exec "$@"
elif [ "$1" == "feature" ]; then
  shift
  changes_feature "$@"
elif [ "$1" == "find" ]; then
  shift
  changes_find "$@"
elif [ "$1" == "files" ]; then
  shift
  changes_files "$@"
elif [ "$1" == "form" ]; then
  shift
  changes_form "$@"
elif [ "$1" == "func" ]; then
  shift
  changes_func "$@"
elif [ "$1" == "generate" ]; then
  shift
  changes_generate "$@"
elif [ "$1" == "grep" ]; then
  shift
  changes_grep "$@"
elif [ "$1" == "hook" ]; then
  shift
  changes_hook "$@"
elif [ "$1" == "init" ]; then
  shift
  changes_init "$@"
elif [ "$1" == "merge" ]; then
  shift
  changes_merge "$@"
elif [ "$1" == "notice" ]; then
  shift
  changes_notice "$@"
elif [ "$1" == "open" ]; then
  shift
  changes_open "$@"
elif [ "$1" == "path" ]; then
  shift
  changes_path "$@"
elif [ "$1" == "release" ]; then
  shift
  changes_release "$@"
elif [ "$1" == "release" ]; then
  shift
  changes_release "$@"
elif [ "$1" == "remove" ]; then
  shift
  changes_remove "$@"
elif [ "$1" == "report" ]; then
  shift
  changes_report "$@"
elif [ "$1" == "revert" ]; then
  shift
  changes_revert "$@"
elif [ "$1" == "root" ]; then
  shift
  changes_root "$@"
elif [ "$1" == "search" ]; then
  shift
  changes_search "$@"
elif [ "$1" == "secure" ]; then
  shift
  changes_secure "$@"
elif [ "$1" == "show" ]; then
  shift
  changes_show "$@"
elif [ "$1" == "type" ]; then
  shift
  changes_type "$@"
elif [ "$1" == "update" ]; then
  shift
  changes_update "$@"
elif [ "$1" == "version" ]; then
  shift
  changes_version "$@"
elif [ "$1" == "versions" ]; then
  shift
  changes_versions "$@"
else
    changes_help
fi
